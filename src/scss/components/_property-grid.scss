
// These property grid specific styles were inspired by the original UPro/Alloy styles called .editable-properties & .list-properties found in src\scss\components\_grid.scss
// .list-properties = the style that was applied by UPro to the left side (names) row items of their property grid. Not the treeview nodes but the list items found as a group as children under a treeview node 
// .editable-properties = the style that was applied by UPro to the right side (values) row items of their property grid. The value items that lined up & matched the left side list-properties. 
// In the UPro version of the property grid it uses ULs/LIs to form the lists of left side items (names) and right side items (values)
// Since we are using ag-grid under the hood we are using its types not simpleton ULs/LIs so this style has been
// slightly modified to be able to select the different visual tree structure of an ag-grid

div.ag-body-container form{
    height: 100%;
}

// **Need to leave all this comment out borrowed code from the base editable & list properties styles as I'd like to extend/derive these styles off of them
.ag-grid-list-properties,
.ag-grid-editable-properties 
{
    display: inline-block;

    padding: 0;

    height: 100%;

    // Original
    // li 
    // {
    //     a 
    //     {
    //         margin-left: 0 !important;
    //     }
    // }
}

// Original
// .ag-grid-list-properties 
// {
//     width: 60%;
// }

.ag-grid-editable-properties
{
    $offset: 8px;
    $height: 22px;

    // Original
    // width: 40%;
    // min-width: 40%;
    // padding-left: $offset;

    // Original
    // Removed this different expectation around the visual tree structure since ag-grid doesn't use ULs/LIs for its children
    // li {

    //     padding-left: 0;

    //     a 
    //     {
    //         margin-left: 0 !important;
    //     }

    div.input-group {
        height: 100%;
    }

    // NOTE: There is base styling that has already been merged in here for this control that comes from any/all other styles that "contribute" to this control style
    // We are just tweaking/overriding things we need to change to make it look good in the context of the property grid.
    input[type="text"] 
    {
        // Original Was set on the input text itself but then it makes the error icon potentially way at the end. 
        // max-width: calc(100% - 32px);

        // Copied: The original value from _grid.scss for an input text box inside of the UPro property grid
        height: 100%;
        margin-bottom: 0;

        // Copied: The original value from _grid.scss for an input text box inside of the UPro property grid
        padding: 3px $offset;

        // Copied: The original value from _grid.scss for an input text box inside of the UPro property grid
        font-size: 13px;

        // Added this has-error section all just to get down to the error image and center it in a smaller 22px high textbox in a property grid (versus a 32px high normal textbox)
        &.has-error 
        {
            &+.error 
            {
            // Tweaked: Auto resizing error icon
            top: 0; // Overwrite parent style of top 8px
            bottom: 0;
            margin: auto;
            }
        }
    }

    // Added this button.dropdown entry here, above and beyond what UPro/Alloy did since they didn't seem to have a drop down featured in their actual sample app
    // NOTE: There is base styling that has already been merged in here for this control that comes from any/all other styles that "contribute" to this control style
    // We are just tweaking/overriding things we need to change to make it look good in the context of the property grid.
    button.dropdown {
        &.lightweight {

            // getRowHeight() method in property-grid.component.ts already forces the overall heigh of each grid row to be 26px
            // lets set the height of this content (button for the dropdown) to 22px like the spec shows
            height: $height;

            // Make the button (default selection) portion of the drop down shorter to fit inside the property grid row
            // Tweaked: Override the original value for a generic dropdown button from _buttons.scss -- too big for living inside a property grid experience
            // padding: 8px 12px;
            padding: 3px $offset;
        }
    }

    // NOTE: There is base styling that has already been merged in here for this control that comes from any/all other styles that "contribute" to this control style
    // We are just tweaking/overriding things we need to change to make it look good in the context of the property grid.
    .dropdown-pane 
    {
        ul.menu 
        {
            li 
            {
                a 
                {
                    // Make the menu item height shorter. Going all the way to 22px seemed way too short. Since this is a drop down menu that lives outside the ag grid rows it looked much better at 32px. Plus it matches the treeview item height.
                    // Tweaked: Override the original value for a generic dropdown from _dropdown.scss -- too big for living inside a property grid experience
                    // height: 40px;
                    height: 32px;

                    // Make the non icon based drop down menu items shorter 
                    // Tweaked: Override the original value for a generic dropdown from _dropdown.scss -- too big for living inside a property grid experience
                    // padding: 12px 40px;
                    padding: 6px 40px;
                }

                &.has-icon 
                {
                    a 
                    {
                        // Make the icon based drop down menu items shorter
                        // Tweaked: Override the original value for a generic dropdown from _dropdown.scss -- too big for living inside a property grid experience
                        // padding: 12px 40px 12px 0;
                        padding: 6px 40px 6px 0;
                    }
                }
            }
        }
    }

    // From original Alloy style for vanilla (non ag-grid) Property Grid. See src\components\_grid.scss file
    // All of these are how other controls can be auto styled that are children of this ag-grid editable-properties style

    .button-standard {
        min-width: 19px;
        min-height: $height;

        margin-left: 4px;
        padding: 3px;
    }

    // JEFF_COMMENT Can't have this while we use an input-group above around the textbox (which we should do following the Caranu pattern for anchoring that error icon to the end of the text box). 
    // Original code from the _grid.scss UPro property grid
    // .input-group {
    //     margin: 1px 0 1px $offset;
    // }

    .combo-box {
        .input-group-field {
        max-width: calc(100% - 36px);
        }

        .dropdown-combo {
        height: $height;

        padding: 3px $offset;
        }
    }

    .checkbox {

        // Tweaked: Override the original value from _grid.scss for a checck box inside of the UPro property grid -- even though a UPro grid row is 22px these 5px values seemed too large
        // Copied: The original value from _grid.scss 
        //margin: 5px 0 5px $offset;
        //margin: 3px 0 3px $offset;
        margin-left: $offset;
        top: 50%;
        transform: translateY(-50%);
    }

    //Added this to account for the property grid read only properties using a paragraph element to turn down their opacity
    p {
        // Copied: The original values from _grid.scss for an input text box inside of the UPro property grid; assuming we want other free form text like paragraph to align with text from text boxes
        height: $height;
        padding: 3px $offset;
        font-size: 13px;
    }

    // Removed this different expectation around the visual tree structure since ag-grid doesn't use ULs/LIs for its children
    //}

}

//*** Alloy overrides to vanilla Ag-Grid styling****

@import './ag-grid';
@import './theme-dark';

/* csslint allow: known-properties, important */

.ag-dark {
    // from _grid.scss $height
    line-height: 22px;
    font-family: $body-font-family;

    // from _grid.scss input text line height
    font-size: 13px;

    color: map_get($color-palette, list-item-color);
 }

.ag-dark .ag-root {
    border: transparent;
}

// F12 debug tools revealed this was the class/style combination for text inputs in the non-editing static state
// When one clicks in the text input to start editing mode then it appears our dynamic editor is instantiated and put in-line (which is a normal alloy based text input)
// Also found this in the ag grid theme-dark.css file ... line 445
.ag-dark input {
    //Map the ag grid class combination to the correct alloy properties. They will color theme switch as appropriate
    //These represent overrides to what was found in the theme-dark.css file. The other properties seem to pick up the normal input text styling from alloy

    // We want editable text fields to have transparent borders and backgrounds until hovered, focused, clicked
    border-color: transparent; 
    background-color: transparent;
    // JEFF_TODO The color (text color) would normally "inherit" the appropriate text color
    // from the Alloy top level color property set on the body HTML tag. 
    // But since this .ag-dark input combination is explicitly overriding it in the
    // theme-dark.css we need to clobber it yet again with what we (Alloy) want
    // For now the only var I could find that has the right text color in both light/dark schemes
    // is this grid-search-placeholder-color var. Need to add a new one to Alloy that 
    // conceptually/semantically describes editable text fields text.
    color: map_get($color-palette, grid-search-placeholder-color);
}

// Similar to the ag-dark input combination except for selects (combos) not text input
// Trying to be  a good citizen and also ensure these look good; map to alloy equivalents
.ag-dark select {
    //Map the ag grid class combination to the correct alloy properties. They will color theme switch as appropriate
    //These represent overrides to what was found in the theme-dark.css file.

    background-color: map_get($color-palette, input-text-bg);
    color: map_get($color-palette, input-text-color);
}


.ag-dark .ag-cell-no-focus {
    border: 0px;
}



// Careful examination in the debugger showed that this style was NOT being overriden, but we needed
// to avoid editing behavior (via a double click) from shifting the cell up.
// There is interaction between this style, and the various focus styles.
.ag-dark  .ag-cell-inline-editing  {
    padding: 2px;
    /* compensate for the transparent borders; */
    padding-left: 1px;
}

.ag-dark .ag-ltr .ag-cell-no-focus {
    // Change all the borders to zero width, to avoid "jumping"
    border: 0px;
}

.ag-dark .ag-body {
    background-color: map_get($color-palette, panel-bg);
}

.ag-dark .ag-row-odd {
    background-color: map_get($color-palette, panel-bg);
}

.ag-dark .ag-row-even {
    background-color: map_get($color-palette, panel-bg);
}

// JEFF This has been validated as correct. 
// This ag-grid class combination originally puts a grey border on a grid cell when it is in the focus state.
// We want to remove it as the Caranu spec doesn't seem to have any kind of border treatment for rows/columns/cell in the property grid
.ag-dark .ag-cell-focus {
    border: 0px solid transparent
}

// JEFF This has been validated as correct. Property grid should use treeview styling for its rows.
// This hover color should match Caranu spec. pg. 96 (light theme) & pg. 54 (dark theme)  for row hover background color which it does
.ag-cell-no-focus:hover {
    background-color: map_get($color-palette, list-item-bg-hover);
}

// Not tested, since we don't have disabled props yet.
.griddarkened {
    opacity: map_get($color-palette, propgrid-item-darkened-opacity);
}

.ag-ltr .ag-cell-no-focus:disabled {
    @extend .griddarkened;
 }

 // Not tested, since we don't have disabled props yet.
 .ag-cell-readonly {
     @extend .griddarkened;
    -webkit-user-select:text;
    -moz-user-select:text;
    -ms-user-select:text;
    user-select:text;
  }

// Start name only highlight experiment
    // This was an attempt to only highlight the group-value box.
    // (IOW, not the entire cell, but just the text in the textbox.)
    // The ":focus" is unsuccessful,
    // but hover works.  Why is that?

    // Testing reveals that the span never gets a focus, and hence is not styled.
    // If I manually force the focus (via F12 tools), this style does work.
    // Hence, the style itself if correct, we are just not getting the focus.
    // See https://stackoverflow.com/questions/20583790/style-span-when-focused-on-form-input for
    // a discussion about this.  Note the approach they use (where they style a preceding element) is not
    // available to us.


    // span.ag-group-value:focus {
    //     background-color:  green;
    // }

    // .ag-group-value:focus {
    //     //background-color: map-get($color-palette, list-item-bg-active);
    //     background-color:  green;
    // }

    // .ag-group-value:hover {
    //     //background-color: map-get($color-palette, list-item-bg-active);
    //     background-color:  red;
    // }

    // .ag-group-value:active {
    //     //background-color: map-get($color-palette, list-item-bg-active);
    //     background-color:  red;
    // }
// End name only highlight experiment


// The carets are defined in
// ...\alloy\src\scss\components\_iconography.scss

// todo:  Some contention here between the expanders spec, and the Alloy demo.
// The expander spec says to highlight the expander, yet the Alloy demo did NOT.
// The code here for active and hover would give it a slightly different appearance.
.ag-icon-expanded {

  //From line #130 of _iconography.scss of Alloy. The definition of Caret itself had to be copied here in
  //line for it to work without having to resort to using !important to force things
  $width: 11px;
  $height: 7px;
  display: inline-block;
  @include size($width, $height);
  background: transparent map_get($icon-pack, caret-down) no-repeat center center / $width $height;
  transform: rotate(-90deg);

  // Gee we wish this would work. Its the same code. However, using the @extend inheritance approach seems to move the order of precedence down so that "something" is
  // wrong with the Caranu caret icons that we bring in. It does find and use the Alloy caret png files but they seemed to be stretched/scaled in a weird way. So it does
  // find the pngs but something else gets lost in translation when using @extend.
  // NOTE: This DOES work if you pepper the actual .caret class with !important statement on its background property

//   @extend .caret;
//   @extend .caret.right;
}

// .ag-icon-expanded:active {
//     @extend .caret:active;
//     @extend .caret.right;
// }

// .ag-icon-expanded:hover {
//     @extend .caret:active;
//     @extend .caret.right;
// }

.ag-icon-contracted 
{
  //From line #130 of _iconography.scss of Alloy. The definition of Caret itself had to be copied here in
  //line for it to work without having to resort to using !important to force things
  $width: 11px;
  $height: 7px;
  display: inline-block;
  @include size($width, $height);
  background: transparent map_get($icon-pack, caret-down) no-repeat center center / $width $height;

  // Gee we wish this would work. Its the same code. However, using the @extend inheritance approach seems to move the order of precedence down so that "something" is
  // wrong with the Caranu caret icons that we bring in. It does find and use the Alloy caret png files but they seemed to be stretched/scaled in a weird way. So it does
  // find the pngs but something else gets lost in translation when using @extend.
  // NOTE: This DOES work if you pepper the actual .caret class with !important statement on its background property
  
//   @extend .caret;
//   @extend .caret.down;
}

// .ag-icon-contracted:active {
//     @extend .caret:active;
//     @extend .caret.down;
// }

// .ag-icon-contracted:hover {
//     @extend .caret:active;
//     @extend .caret.down;
// }


// ag-grid uses this style to swap between light and dark representation.
// Since we are using our own icons (see above), we need to disable this styling.
// Just putting in a blank style does NOT work.
// Instead, we use the unset feature.
// See https://developer.mozilla.org/en-US/docs/Web/CSS/unset
.ag-dark .ag-icon {
    -webkit-filter: unset;
    filter: unset;
}

// scroll bar settings because ag-grid sets scroll bar to 2 pixels wide - this
// fixed that back to the alloy definition
.ag-dark ::-webkit-scrollbar {
    // @extend ::-webkit-scrollbar;  // JEFF_TODO this only works if !important is added to the scrollbars.scss webkit-scrollbar

    // JEFF_TODO the following is the copy from the _scrollbars.scss file
    width: 16px;
}

.ag-dark ::-webkit-scrollbar-track {
    // @extend ::-webkit-scrollbar-track; // JEFF_TODO this is the preferred way, but even the !important isn't working for this

    // JEFF_TODO the following is the copy from the _scrollbars.scss file
    padding: 0 4px;

    border: 1px solid map_get($color-palette, scrollbar-track-border);
    border-top: none;
    border-bottom: none;

    background-color: map_get($color-palette, scrollbar-track-bg);
}

.ag-dark ::-webkit-scrollbar-thumb {
    // @extend ::-webkit-scrollbar-thumb;  // JEFF_TODO this is the preferred way, but even the !important isn't working for this

    // JEFF_TODO the following is the copy from the _scrollbars.scss file
    border: 1px solid transparent;
    border-top: none;
    border-bottom: none;
    border-radius: 1px;

    box-shadow: inset 0 0 0 4px map_get($color-palette, scrollbar-track-bg);

    background-color: map_get($color-palette, scrollbar-thumb-bg);
    background-clip: padding-box;

    &:hover {
      background-color: map_get($color-palette, scrollbar-thumb-bg-hover);
    }

    &:active {
      background-color: map_get($color-palette, scrollbar-thumb-bg-active);
    }
}
