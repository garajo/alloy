@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin iconStates ($icon, $x: '', $y: $x) {
  background: transparent url(#{$icon}.png) no-repeat center / $x $y;

  &:hover {
    background: transparent url(#{$icon}-hover.png) no-repeat center / $x $y;
  }

  &:active,
  &:focus {
    background: transparent url(#{$icon}-active.png) no-repeat center / $x $y;
  }
}

@mixin gradientVertical ($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: no-repeat;
}

@mixin gradientVertical3x ($start-color: #555, $mid-color: #444, $end-color: #333, $start-percent: 0%, $mid-percent: 50%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $mid-color $mid-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(top, $start-color $start-percent, $mid-color $mid-percent, $end-color $end-percent);  // Opera 12
  background-image: linear-gradient(to bottom, $start-color $start-percent, $mid-color $mid-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: no-repeat;
}

@mixin border-top-radius ($radius: 0) {
  border-top-right-radius: $radius;
  border-top-left-radius: $radius;
}

@mixin border-bottom-radius ($radius: 0) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-left-radius ($radius: 0) {
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-right-radius ($radius: 0) {
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}

@mixin placeholder-color($color) {
  &::-webkit-input-placeholder {
    color: $color;
  }

  &:-moz-placeholder {
    color: $color;
  }

  &:-ms-input-placeholder {
    color: $color;
  }
}

@mixin placeholder-font($color, $size, $style) {
  &::-webkit-input-placeholder {
    color: $color;
    font-size: $size;
    font-style: $style;
  }

  &:-moz-placeholder {
    color: $color;
    font-size: $size;
    font-style: $style;
  }

  &:-ms-input-placeholder {
    color: $color;
    font-size: $size;
    font-style: $style;
  }
}

@mixin ellipses {
  overflow: hidden;

  text-overflow: ellipsis;
  white-space: nowrap;
}

// Recursively offsets nested unordered lists for the Property grid
@mixin nested-offset($depth: 1, $max-depth: 10, $offset: 16px) {
  .nested {
    .list-properties {
      li {
        padding-left: $offset * ($depth + 1);
      }
    }

    li {
      a {
        margin-left: $offset * ($depth + 1);
      }
    }

    @if $depth < $max-depth {
      @include nested-offset($depth + 1);
    }
  }
}

// Base formating for iconography classes
// Why was the default set to 20px? I see exactly zero spots in the Caranu spec calling for a 20x20px icons.
// There is only 16x16 (most) and as an alternate 24x24(usually only in toolbars and tab icons)
// Consumers will have to derive/tweak if they want some other non Caranu size
@mixin icon-base($name, $size: 16px) {
  display: inline-block;
  @include size($size);

  background: transparent map-get($icon-pack, $name) no-repeat center center / $size;
}

@mixin icon-base-non-uniform($name, $width, $height) {
  display: inline-block;
  @include size($width, $height);

  background: transparent map-get($icon-pack, $name) no-repeat center center / $width $height;
}

// Mixin to abstract the responsive logo behavior; assume your "logo" experience consists of an icon to the left + some other UI to the right (usually text in the form of an image as well)
// The default is to be responsive: less than medium break point the logo loses the 2nd/Right most image and only shows its icon
// The responsive behavior can be "overriden" using the .full state (force full experience) or the .icon-only state (force the icon only state) for dynamic override given certain situations (See the Alloy HTML demo for an example)
@mixin titlebar-responsive-logo($logo-name, $logo-full-width: 70px, $logo-icon-width: 21px, $logo-icon-height: 22px) {
  $icon-width: $logo-icon-width;
  // Caran spec pg. 91 says titlebar branding icons should be 22px high
  $height:  $logo-icon-height;
  $bg-width: $logo-full-width;

  display: inline-block;
  @include size($icon-width, $height);

  // Caranu spec pg. 91 calls for a 10px margin to the right of the keysight logo experience
  // Since the height has been changed from 16px high to 22px to spec; reduced the top/bottom margins accordingly
  margin: 4px 10px 4px 0;

  background: transparent map_get($icon-pack, $logo-name) no-repeat left center / $bg-width $height;

  // Since this is a child of a top level class in this file it doesn't require the "alloy-ic-" prefix as it won't be applied to it. Only to top level classes (children of the prefix declaration)
  &.full {
      width: $bg-width;

      margin: 4px 10px 4px 0;
  }

  // This breakpoint says anything smaller than medium should remove the "keysight" text and make the logo the icon only but still not sure how that .icon-only state gets auto applied. Nothing else is actually setting it.
  @include breakpoint(medium) {
      width: $bg-width;

      margin: 4px 10px 4px 0;

      // Since this is a child of a top level class in this file it doesn't require the "alloy-ic-" prefix as it won't be applied to it. Only to top level classes (children of the prefix declaration)
      // If used in conjuntion with the keysight-logo class it will only show the icon
      // Presumably this combination allows for dynamically showing/hiding the "keysight" text next to the icon given form factors
      // The keysight-logo-icon class above would only employ the keysight logo icon in a static way
      &.icon-only {
      width: $icon-width;

      // Seems like some strange vodoo going on here with overriding the margin yet again from line 110. Should we just be using Foundation to vertically center things?
      margin: 4px 10px 4px 0;
      }
  }
}