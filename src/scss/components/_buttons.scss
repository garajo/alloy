@mixin buttonCore {
    @extend .alloy-controls-font;
    * {
        vertical-align: middle;
    }

    user-select: none;

    // AJM: Custom focus styling applies even when clicked which is a poor UX.  FocusMonitor adds modality to focus.
    // This won't support focus in html.  There's a bug that fires mouse events as 'program' for nested labels right now.
    // So for now we support only keyboard, uncomment 'program' if fixed.
    &.cdk-keyboard-focused/* , &.cdk-program-focused */ {
        outline: 2px dashed map_get($color-palette, control-default-focus-color) /*another foundation wart -->*/!important;
        outline-offset: -2px;   // Use an inset overlay since siblings can overlap an external outline
    }
}

.alloy-button-standard {
    @include gradientVertical(map_get($color-palette, button-standard-gradient-top), map_get($color-palette, button-standard-gradient-bottom));
    @include buttonCore;
    @include setIdentity(16px, 14px, 10px);

    min-width: 80px;
    height: 32px;
    line-height: 32px;
    padding-left: 12px;
    padding-right: 12px;
    border-radius: 1px;
    color: map_get($color-palette, button-standard-color);
    box-shadow: $button-standard-box-shadow;

    color: map_get($color-palette, button-standard-color);

    &:hover {
        @include gradientVertical(map_get($color-palette, button-standard-hover-gradient-top), map_get($color-palette, button-standard-hover-gradient-bottom));
        box-shadow: $button-standard-hover-box-shadow;
    }
    &.alloy-toggled {
        color: map_get($color-palette, button-standard-checked-color);
        background: map_get($color-palette, button-standard-checked-bg);
        box-shadow: $button-standard-checked-box-shadow;
    }
    &.alloy-toggled:hover {
        background: map_get($color-palette, button-standard-checked-hover-bg);
    }
    &:active, &.alloy-toggled:active {
        color: map_get($color-palette, button-standard-active-color);
        background: map_get($color-palette, button-standard-active-bg);
        box-shadow: $button-standard-active-box-shadow;
    }
    &:disabled {
        opacity: map_get($color-palette, button-standard-disabled-opacity);
        color: map_get($color-palette, button-standard-disabled-text-color);
        pointer-events: none;
    }
}

// Toggle has slightly different margins (p19)
.alloy-button-standard[toggle] {
    width: max-content;

    padding-left: 16px;
    padding-right: 16px;
}

.alloy-button-default {
    @extend .alloy-button-standard;
    box-shadow: $button-default-box-shadow;
    &:hover {
        box-shadow: $button-default-hover-box-shadow;
    }
    &:checked:hover {
        background: map_get($color-palette, button-standard-checked-hover-bg);
    }
    &:active {
        box-shadow: $button-default-active-box-shadow;
    }
}

.alloy-button-toolbar {
    @include buttonCore();
    @include setIdentity(24px, 14px, 8px);

    background-color: transparent;
    color: map_get($color-palette, button-toolbar-label-color);

    border-radius: 2px;

    height: 48px;
    line-height: 48px;  // This ensures icons can center based on text.
    width: max-content;

    padding-left: 12px;
    padding-right: 12px;

    // TODO: AJM: The two checked states are placeholders until we can toggle icon color. (p45)
    &.alloy-toggled {
        background-color: map_get($color-palette, button-toolbar-checked-bg);
    }
    &:enabled:hover {
        background-color: map_get($color-palette, button-toolbar-hover-bg);
        &.alloy-toggled {
            background-color: map_get($color-palette, button-toolbar-checked-hover-bg);
        }
    }
    &:active, &.alloy-toggled:active {
        background-color: map_get($color-palette, button-toolbar-active-bg);
        box-shadow: $button-toolbar-active-box-shadow;
    }
    &:disabled {
        opacity: map_get($color-palette, control-default-disabled-opacity);
        background-color: transparent;
        box-shadow: none;
    }
}

.alloy-button-quickaccess {
    @include buttonCore;
    @include setIdentity(16px, 14px, 10px);

    width: 48px;
    height: 32px;
    border-radius: 2px;

    // AJM: I dislike defining the internals with margin, but the border/negative space can only be done with margin
    margin-top: 1px;
    margin-bottom: 1px;

    &:hover {
      background-color: map_get($color-palette, button-quick-access-hover-bg);
    }

    &:active {
      background-color: map_get($color-palette, button-quick-access-active-bg);
      box-shadow: $button-quickaccess-active-box-shadow;
    }
    &:disabled {
        opacity: map_get($color-palette, button-standard-disabled-opacity);
        color: map_get($color-palette, button-standard-disabled-text-color);
        pointer-events: none;
    }
}

.alloy-button-switch {
    @include size(44px, 16px);

    position: absolute;

    border: 1px solid map_get($color-palette, switch-border);
    border-radius: 32px;

    background: map_get($color-palette, switch-bg);

    &:after {
        content: "";
        display: inline-block;
        position: absolute;
        top: 2px; left: 2px;
        width: 19px;
        height: 10px;
        transition: left 0.25s ease-out;

        border-radius: 16px;

        background: map_get($color-palette, switch-thumb-bg);
        border: map_get($color-palette, switch-border);
    }

    &.alloy-toggled {
        border-color: transparent;
        background: map_get($color-palette, switch-bg-checked);

        &:after {
            left: 21px;
            background: map_get($color-palette, switch-thumb-bg-checked);
        }
    }

    // :hover trumps :active, so deconflict
    &:enabled:hover:not(:active) {
        border: 1px solid map_get($color-palette, switch-border-hover);
        &:after {
            background: map_get($color-palette, switch-thumb-bg-hover);
        }

        &.alloy-toggled {
            border-color: transparent;
            background: map_get($color-palette, switch-bg-checked-hover);
            &:after {
                background: map_get($color-palette, switch-thumb-bg-checked-hover);
            }
        }
    }

    &:active, &:active {
        border-color: transparent;
        background: map_get($color-palette, switch-bg-pressed);

        &:after {
            background: map_get($color-palette, switch-thumb-bg-pressed);
        }
    }

    &:disabled {
        opacity: map_get($color-palette, switch-disabled-opacity);
    }
}

// TODO: AJM: Needed these for testing, but the various bars should move to _toolbar
.quick-access-bar {         //p52
    display: inline-flex;   // Ditch the inter-child block spacing
    align-items: flex-end;  // Bottom-align

    &.primary > .quick-access-group-box:not(:first-child) {
        margin-left: 16px;
    }

    &.secondary > .quick-access-group-box:not(:last-child) {
        margin-right: 16px;
    }
}

.quick-access-group-box {   // p52
    display: inline-flex;   // Ditch the inter-child block spacing
    border: inset 1px map_get($color-palette, quick-access-group-box-border);
    border-bottom: none;
    background-color: map_get($color-palette, quick-acess-group-box-bg);
}

.toolbar {  // p45,87
    @include linear-gradient-vertical($toolbar-background);
    display: inline-flex;
    width: 100%;
    padding: 4px 0;

    box-shadow: 0 1px 0 0 map_get($color-palette, toolbar-shadow-inset-top) inset,
                0 -1px 0 0 map_get($color-palette, toolbar-shadow-inset-bottom) inset,
                0 2px 6px 0 map_get($color-palette, toolbar-shadow);

    .separator {
        display: inline-block;

        height: 56px; // TODO: AJM: not a fan of hard-wired px here
        width: 1px;
        background-color: map_get($color-palette, toolbar-group-separator);

        margin: -4px 12px;  // -4px negates the padding, alternatively we could select for toolbar buttons for margin
    }

    // TODO: AJM: Need classes for expanded/collapsed, set by the collapse-button

    .collapse-button {
        @extend .alloy-ic-caret.down;
        margin-left: auto;
        margin-bottom: 12px;
        margin-right: 16px;

        .is-toggled {
            @extend .alloy-ic-caret.up;
        }
    }
}

.button-close-x,
.button-maximize,
.button-minimize {
    @include size(48px, 30px); // p47
    margin: 1px 0;
    padding: 7px 16px;
    border-radius: 2px;
    transition: none;
    &,
    * {
        vertical-align: top;
    }
    &:focus {
        background-color: transparent;
    }
}

.button-close-x {
    @extend .alloy-ic-window-close;
    &:hover,
    &:focus {
        background-color: map_get($color-palette, button-close-x-hover-bg);
    }
    &:active {
        background-color: map_get($color-palette, button-close-x-active-bg);
        box-shadow: inset 0 0 0 1px map_get($color-palette, button-close-x-active-box-shadow);
    }
}

.button-maximize {
    @extend .alloy-ic-window-maximize;
}

.button-minimize {
    @extend .alloy-ic-window-minimize;
}

.button-maximize,
.button-minimize {
    &:hover,
    &:focus {
        background-color: map_get($color-palette, button-min-max-hover-bg);
    }
    &:active {
        background-color: map_get($color-palette, button-min-max-active-bg);
        box-shadow: inset 0 0 0 1px map_get($color-palette, button-min-max-active-box-shadow);
    }
}

.button-caret-up {
    @extend .button-toolbar;
    @extend .alloy-ic-caret.up;
}

// TODO: AJM: We should really make this a directive and inject the bits and pieces like checkbox
.split-button-group {
    button {
        padding-right: 6px;
        &:first-of-type {
            @include border-right-radius(0);
        }
    }
    &:hover {
        .button-toolbar {
            border: inset 1px transparent;
            background-color: map_get($color-palette, button-split-group-hover-bg);
            &:hover {
                background-color: map_get($color-palette, button-toolbar-hover-bg);
            }
            &.arrow-only {
                border-left: 1px solid map_get($color-palette, button-split-group-divider);
            }
        }
    }
}

// Deprecated alias of .quick-access-group-box, target (1.0.0)
.button-group-box {
    @extend .button-group;      // AJM: excluded from the refactored class since it's a foundation class
    @extend .quick-access-group-box;

    // AJM: This is all wrong or unneeded
    margin: 0;

    &:first-child {
        &:not(:only-child) {
            margin-right: 11px;
        }
    }
    &:not(:first-child) {
        margin-left: 11px;
    }
    &:not(:last-child) {
        margin-right: -4px;
    }

    button {
        &,
        &:hover,
        &:active,
        &:focus,
        &.is-active {
            border-radius: 0;
        }
    }
}

// Deprecated, target (1.0.0)
.button-standard {
  &,
  &:focus {
    position: relative;
    min-width: 80px;
    min-height: 32px;
    * {
      vertical-align: middle;
    }

    padding: 8px 12px;
    border: none;
    border-radius: 1px;

    @include gradientVertical(map_get($color-palette, button-standard-gradient-top), map_get($color-palette, button-standard-gradient-bottom));

    @if $theme-light == true {
      box-shadow: inset 0 2px 0 0 map_get($color-palette, button-standard-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow);

      &:before {
        content: '';
        display: block;
        position: absolute;
        top: 0; right: 0; bottom: 0; left: 0;

        border: solid 1px map_get($color-palette, button-standard-border);
      }
    } @else {
      box-shadow: inset 0 2px 0 0 map_get($color-palette, button-standard-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                  0 1px 0 0 map_get($color-palette, button-standard-shadow);
    }

    color: map_get($color-palette, button-standard-color);
    font-size: 14px;
    font-weight: normal;
  }


  span {
    display: inline-block;
    vertical-align: top;

    margin: 2px 10px 0 0;
  }

  label {
    cursor: inherit;
  }

  &,
  &:hover,
  &.is-hovered,
  &:focus,
  &.is-pressed,
  &:active,
  &.is-active,
  &:disabled,
  &.is-disabled {
    background-color: transparent;
  }

  &:hover,
  &.is-hovered {
    @include gradientVertical(map_get($color-palette, button-standard-hover-gradient-top), map_get($color-palette, button-standard-hover-gradient-bottom));

    @if $theme-light == true {
      box-shadow: inset 0 2px 0 0 map_get($color-palette, button-standard-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow);

      &:before {
        border: 1px solid map_get($color-palette, button-standard-hover-border-inset);
      }

    } @else {
      box-shadow: inset 0 1px 1px 0 map_get($color-palette, button-standard-hover-shadow-inset),
                0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                0 1px 0 0 map_get($color-palette, button-standard-shadow);
    }

    color: map_get($color-palette, button-standard-color);
  }

  &:active,
  &.is-pressed {
    background: map_get($color-palette, button-standard-active-bg);

    @if $theme-light == true {
      border: none;

      box-shadow: 0 1px 3px 0 map_get($color-palette, button-standard-shadow);

      &:before {
        border: none;
      }
    }

    color: map_get($color-palette, button-standard-active-color);
  }


  // AJM: Sounds like this is a workaround for :active being wrong
  &.is-active {
    background: map_get($color-palette, button-standard-checked-bg);

    @if $theme-light == true {
      box-shadow: inset 0 2px 0 0 map_get($color-palette, button-standard-checked-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow);

      &:before {
        border: 1px solid map_get($color-palette, button-standard-checked-border-inset);
      }

    } @else {
      box-shadow: inset 0 1px 0 0 map_get($color-palette, button-standard-checked-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                  0 1px 0 0 map_get($color-palette, button-standard-shadow);
    }

    color: map_get($color-palette, button-standard-color);
  }

  &:disabled,
  &.is-disabled {
    opacity: map_get($color-palette, button-standard-disabled-opacity);

    color: map_get($color-palette, button-standard-disabled-text-color);

    pointer-events: none;
  }
}

// Deprecated, target (1.0.0)
.button-default {
  @extend .button-standard;
  position: relative;

  @if $theme-light == true {
    box-shadow: inset 0 0 4px 0 map_get($color-palette, button-default-shadow-inset),
                inset 0 2px 0 0 map_get($color-palette, button-standard-shadow-inset),
                0 1px 3px 0 map_get($color-palette, button-standard-shadow);

    &:after {
      content: '';
      display: block;
      position: absolute;
      top: 0; right: 0; bottom: 0; left: 0;

      border: solid 1px map_get($color-palette, button-default-border-inset);
    }
  } @else {
    border: solid 1px map_get($color-palette, button-default-border-inset);

    box-shadow: inset 0 0 4px 0 map_get($color-palette, button-default-shadow-inset),
                inset 0 1px 1px 0 map_get($color-palette, button-standard-shadow-inset),
                0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                0 1px 0 0 map_get($color-palette, button-standard-shadow);
  }

  &:hover,
  &.is-hovered {
    @if $theme-light == true {
      box-shadow: inset 0 0 4px 0 map_get($color-palette, button-default-hover-shadow-inset),
                  inset 0 2px 0 0 map_get($color-palette, button-standard-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow);

      &:after {
        border: 1px solid map_get($color-palette, button-default-hover-border-inset);
      }
    } @else {
      border: solid 1px map_get($color-palette, button-default-border-inset);

      box-shadow: inset 0 0 4px 0 map_get($color-palette, button-default-shadow-inset),
                  inset 0 1px 1px 0 map_get($color-palette, button-default-hover-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                  0 1px 0 0 map_get($color-palette, button-standard-shadow);
    }
  }

  &:focus,
  &.is-pressed,
  &:active,
  &.is-active,
  &:disabled,
  &.is-disabled {
    @if $theme-light == false {
      border: none;
    }
  }

  &:active,
  &.is-pressed {
    @if $theme-light == true {
      box-shadow: 0 1px 3px 0 map_get($color-palette, button-standard-shadow);

      &:after {
        border: none;
      }
    } @else {
      box-shadow: inset 0 1px 1px 0 map_get($color-palette, button-standard-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                  0 1px 0 0 map_get($color-palette, button-standard-shadow);
    }
  }

  &.is-active {
    @if $theme-light == true {
      box-shadow: inset 0 2px 0 0 map_get($color-palette, button-standard-checked-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow);

      &:after {
        border: 1px solid map_get($color-palette, button-standard-checked-border-inset);
      }

    } @else {
      box-shadow: inset 0 1px 0 0 map_get($color-palette, button-standard-checked-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                  0 1px 0 0 map_get($color-palette, button-standard-shadow);
    }
  }

  // TODO: AJM: Disabled should be just the standard opacity change.  Why would we remove the 'default' border?
  &:disabled,
  &.is-disabled {
    @if $theme-light == true {
      box-shadow: inset 0 2px 0 0 map_get($color-palette, button-standard-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow);

      &:after {
        border: solid 1px map_get($color-palette, button-standard-border);
      }
    } @else {
      box-shadow: inset 0 1px 1px 0 map_get($color-palette, button-standard-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                  0 1px 0 0 map_get($color-palette, button-standard-shadow);
    }
  }
}

// Deprecated, target (1.0.0)
.button-toolbar, .button-toolbar:focus {
  padding: 11px;
  border: 1px solid transparent;
  color: map_get($color-palette, button-toolbar-label-color);
  background: transparent;

  * {
    vertical-align: middle;
  }

  span {
    margin: 0;
  }

  label {
    display: inline-block;

    margin-left: 8px;

    // JEFF This is kind of silly to assume a toolbar button will always have an icon and therefore 8px are reserved on the left
    // Give a way for the consumer of Alloy to use toolbar buttons and their labels without icons
    &.no-icon
    {
      margin-left: 0px;
    }

    color: map_get($color-palette, button-toolbar-label-color);
    font-size: 14px;
    line-height: normal;
    cursor: inherit;
  }

  &:hover,
  &.is-hovered,
  &:active,
  &.is-active {
    border-radius: 2px;
  }

  &:hover,
  &.is-hovered {
    background-color: map_get($color-palette, button-toolbar-hover-bg);
  }

  &:active {
    border: 1px solid map_get($color-palette, button-toolbar-active-border);

    background-color: map_get($color-palette, button-toolbar-active-bg);
  }

  //JEFF_NOTE: Alloy toolbar buttons don't have a disabled state (they should!) let's add one here.
  &:disabled,
  &.is-disabled
  {
      opacity: map_get($color-palette, button-standard-disabled-opacity);

      color: map_get($color-palette, button-standard-disabled-text-color);

      background-color: transparent;

      pointer-events: none;
  }

  &.is-active {
    // JEFF_TODO Wow really! Assume there is a class by this name, assume it is an image, and then make its color change. Need to turn this style into a real generic style
    .alloy-ic-ph-toolbar-box {
      $size: 24px;

      background: map_get($icon-pack, ph-toolbar-box-active) no-repeat center center / $size;
    }
  }
}

// Deprecated, target (1.0.0)
.button-quick-access, .button-quick-access:focus {
  height: 32px;

  padding: 8px 15px;
  border: inset 1px transparent;

  background-color: transparent;

  &:hover,
  &:active,
  &.is-active {
    height: 30px;

    margin: 1px 0;
    padding: 7px 15px;

    border-radius: 2px;
  }

  &:hover,
  &.is-hovered {
    background-color: map_get($color-palette, button-quick-access-hover-bg);
  }

  &:active,
  &.is-active {
    position:relative;

    border: inset 1px solid map_get($color-palette, button-quick-access-active-border);

    background-color: map_get($color-palette, button-quick-access-active-bg);
  }

  // ARJUN_NOTE: Alloy quick access buttons don't have a disabled state (they should!) let's add one here.
  &:disabled,
  &.is-disabled
  {
      opacity: map_get($color-palette, button-quick-access-disabled-opacity);

      color: map_get($color-palette, button-quick-access-disabled-text-color);

      background-color: transparent;

      pointer-events: none;
  }
}

// TODO: AJM: Requires refactor
button.dropdown {
    @extend .button;
  $caret-width: 11px;
  $caret-height: 7px;
  $icon-width: 24px;
  $icon-height: 24px;

  // AJM: Hack for dropdown showing a blue border from god knows where
  // This is a sloppy blind patch, but this code is barely readable and just needs to be eradicated ASAP
  border: none;

  * {
    vertical-align: middle;
  }

  span {
    margin: 0;
  }

  label {
    display: inline-block;

    font-size: 14px;
    line-height: normal;
    cursor: inherit;
  }

  img {
    line-height: normal;
    width: $icon-width;
    height: $icon-height;
  }


  &:after {
    @include size($caret-width, $caret-height);

    border: none;

    background: transparent (map_get($icon-pack, caret-down)) no-repeat center center / $caret-width $caret-height;
  }

  &.nocaret::after {
    //Remove the "after the content" content. IOW if you turn on this class the caret will be removed.
    content:none;
  }

  &.button-toolbar {
    &:after {
      top: 9px;

      margin-left: 6px;
    }
  }

  &.arrow-only {
    padding: 11px 6px;
    @include border-left-radius(0);
    @include border-right-radius(2px);

    &:after {
      top: 0;

      margin: 0;
    }
  }

  &.dropdown-combo {
    padding: 7px 8px 8px;
    border: 1px solid map_get($color-palette, button-dropdown-combo-border);
    border-left: transparent;
    border-radius: 0;

    background-color: map_get($color-palette, button-dropdown-combo-bg);

    transition: border-color 0.25s ease-in-out,
                background-color 0.25s ease-in-out;
  }

  &.lightweight {
    padding: 8px 12px;
    border: none;

    background: transparent;

    &:after {
      top: 5px;

      margin-left: 8px;
        // AJM: Hack for dropdown showing a blue border from god knows where
        // This is a sloppy blind patch, but this code is barely readable and just needs to be eradicated ASAP
        border: none;
    }

    label {
      color: map_get($color-palette, button-dropdown-lightweight-color);
    }
  }

  &.button-standard {
    width: auto;

    padding: 8px 12px;
    border-radius: 0;

    @if $theme-light == false {
      box-shadow: inset 0 1px 1px 0 map_get($color-palette, button-standard-shadow-inset),
                  0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                  0 1px 0 0 map_get($color-palette, button-standard-shadow);
    }

    text-align: left;

    label {
      color: map_get($color-palette, button-dropdown-color);
    }
  }

  &:hover,
  &.is-hovered {
    &:after {
      background: transparent map_get($icon-pack, caret-down-hover) no-repeat center center / $caret-width $caret-height;
    }

    &.dropdown-combo {
      background-color: map_get($color-palette, button-dropdown-combo-bg-hover);

      transition: border-color 0.25s ease-in-out,
                  background-color 0.25s ease-in-out;
    }

    &.lightweight {
      label {
        color: map_get($color-palette, button-dropdown-lightweight-color-hover);
      }
    }

    &.button-standard {
      @if $theme-light == false {
        box-shadow: inset 0 1px 1px 0 map_get($color-palette, button-standard-hover-shadow-inset),
                    0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                    0 1px 0 0 map_get($color-palette, button-standard-shadow);
      }

      label {
        color: map_get($color-palette, button-dropdown-color);
      }
    }
  }

  &:active,
  &.is-active,
  &.is-open,
  &.is-pressed {
    &.dropdown-combo {
      border: 1px solid map_get($color-palette, input-text-border-active);
      border-left: transparent;

      background-color: map_get($color-palette, input-text-border-active);

      &:after {
        background: transparent map_get($icon-pack, caret-down-active) no-repeat center center / $caret-width $caret-height;
                // AJM: Hack for dropdown showing a blue border from god knows where
        // This is a sloppy blind patch, but this code is barely readable and just needs to be eradicated ASAP
        border: none;

        transform: rotate(180deg);
      }
    }

    &.lightweight {
      &:after {
        background: transparent map_get($icon-pack, caret-down-alt-active) no-repeat center center / $caret-width $caret-height;
                // AJM: Hack for dropdown showing a blue border from god knows where
        // This is a sloppy blind patch, but this code is barely readable and just needs to be eradicated ASAP
        border: none;

        transform: rotate(180deg);
      }

      label {
        color: map_get($color-palette, button-dropdown-lightweight-color-active);
      }
    }

    &.button-standard {
      @include gradientVertical(map_get($color-palette, button-standard-gradient-top), map_get($color-palette, button-standard-gradient-bottom));
      background-color: transparent;

      @if $theme-light == true {
        box-shadow: inset 0 1px 1px 0 map_get($color-palette, button-standard-shadow-inset),
                    0 1px 3px 0 map_get($color-palette, button-standard-shadow),
                    0 1px 0 0 map_get($color-palette, button-standard-shadow);
      }

      &:after {
        background: transparent map_get($icon-pack, caret-down-hover) no-repeat center center / $caret-width $caret-height;
                // AJM: Hack for dropdown showing a blue border from god knows where
        // This is a sloppy blind patch, but this code is barely readable and just needs to be eradicated ASAP
        border: none;

        transform: rotate(180deg);
      }

      label {
        color: map_get($color-palette, button-dropdown-color);
      }
    }
  }
}

// TODO: AJM: Requires refactor
.spin {
  position: relative;
  width: 24px;

  &,
  &:focus {
    padding: 13px 7px;
    border: 1px solid map_get($color-palette, button-spin-border);

    @include gradientVertical(map_get($color-palette, button-spin-gradient-top), map_get($color-palette, button-spin-gradient-bottom));
    background-color: transparent !important;

    &:after {
      display: block;
      content: '';
      position: absolute;
      top: 0; left: 0;
      @include size(100%);
    }
  }

  &,
  &:disabled,
  &.is-disabled {
    &.up {
      &:after {
        @extend .alloy-ic-arrow.up;
      }
    }

    &.down {
      &:after {
        @extend .alloy-ic-arrow.down;
      }
    }
  }

  &:hover,
  &.is-hovered {
    @include gradientVertical(map_get($color-palette, button-spin-gradient-top-hover), map_get($color-palette, button-spin-gradient-bottom-hover));
  }

  &:hover,
  &.is-hovered {
    &.up {
      &:after {
        @extend .alloy-ic-arrow.up:hover;
      }
    }

    &.down {
      &:after {
        @extend .alloy-ic-arrow.down:hover;
      }
    }
  }

  &:active,
  &.is-pressed {
    &.up {
      &:after {
        @extend .alloy-ic-arrow.up:active;
      }
    }

    &.down {
      &:after {
        @extend .alloy-ic-arrow.down:active;
      }
    }
  }

  &:disabled,
  &.is-disabled {
    pointer-events: none;

    opacity: map_get($color-palette, button-spin-opacity-disabled);
  }
}

// TODO: AJM: Requires refactor
.button-scroll {
  $caret-width: 6px;
  $caret-height: 5px;
  $size: 16px;

  @include size($size);

  padding: 0;
  border: 1px solid transparent;
  border-top: none;
  border-bottom: none;

  &.up {
    background: transparent map_get($icon-pack, scroll-caret-down) no-repeat center center / $caret-width $caret-height;

    transform: rotate(180deg);
  }

  &.down {
    background: transparent map_get($icon-pack, scroll-caret-down) no-repeat center center / $caret-width $caret-height;
  }

  &:hover,
  &.is-hovered {
    &.up {
      background: map_get($color-palette, scrollbar-button-bg-hover) map_get($icon-pack, scroll-caret-down-hover) no-repeat center center / $caret-width $caret-height;
    }

    &.down {
      background: map_get($color-palette, scrollbar-button-bg-hover) map_get($icon-pack, scroll-caret-down-hover) no-repeat center center / $caret-width $caret-height;
    }
  }

  &:active,
  &.is-active {
    &.up {
      background: map_get($color-palette, scrollbar-button-bg-active) map_get($icon-pack, scroll-caret-down-active) no-repeat center center / $caret-width $caret-height;
    }

    &.down {
      background: map_get($color-palette, scrollbar-button-bg-active) map_get($icon-pack, scroll-caret-down-active) no-repeat center center / $caret-width $caret-height;
    }
  }
}
