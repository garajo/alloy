$prefix: alloy-ic-;

.#{$prefix} {

  &tools {
    // JEFF_TODO Should these icons really be 24pxs? Most of the Caranu spec says icons should be 16x16; especially for the titlebar area
    $size: 24px;

    display: inline-block;
    @include size($size);

    background: transparent map_get($icon-pack, tools) no-repeat center center / $size;
  }

  &computer {
    // JEFF_TODO Should these icons really be 24pxs? Most of the Caranu spec says icons should be 16x16; especially for the titlebar area
    $size: 24px;

    display: inline-block;
    @include size($size);

    background: transparent map_get($icon-pack, computer) no-repeat center center / $size;
  }

  &edit {
    $size: 16px;

    display: inline-block;
    @include size($size);

    background: transparent map_get($icon-pack, edit) no-repeat center center / $size;
  }

  
  
  &ph-menu-box {
    @include icon-base(ph-menu-box, 14px);

    &.small {
        $size: 11px;

        @include size($size);

        background-size: $size;
    }
  }

  &ph-toolbar-box {
    // This is just a sample icon but according to the Caranu spec pg. 45 it does look like toolbar icons should be 24x24 (image) but the target area for invocation (mouse hover, touch etc.) should be 48x48 (not visual)
    $size: 24px;
    @include icon-base(ph-toolbar-box, $size);

    &.is-active {
        background: transparent map_get($icon-pack, ph-toolbar-box-active) no-repeat center center / $size;
    }

    &.small {
        &,
        &.is-active {
        $size: 16px;

        @include size($size);

        background: transparent map_get($icon-pack, ph-toolbar-box-active) no-repeat center center / $size;
        }
    }
  }

  &ph-spacer {
    display: inline-block;
    @include size(16px);

    background-color: map_get($color-palette, style-guide-spacer-bg);
  }

  // This is a new branding logo class that exposes the existing red wave icon by itself: as such I'm going to use the correct Caranu spec sizes
  // Since this is a new class; we have the advantage to snap it to the naming scheme. If Alloy adopters just want the Keysight red wave icon here it is.
  // This image = <Keysight red wave logo icon>
  &keysight-logo-icon {
    $icon-width: 21px;
    // Caranu height for title bar branding red wave icon (see spec pg. 91)
    $height: 22px;

    display: inline-block;
    @include size($icon-width, $height);

    // Even though the spec has hard coded margins top/bottom of 4px etc.
    // I think that is too inflexible as these logos should just be vertically aligned
    margin: 4px 10px 4px 0;

    background: transparent map_get($icon-pack, keysight-logo-icon) no-repeat left center / $icon-width $height;
  }

  // This image = <Keysight red wave logo icon> + "Keysight"
  &keysight-logo,
  &logo { // this "logo" class name is too generic/confusing. All the various keysight logos (icon only, icon + "Keysight", icon + "Keysight Technologies" etc.) were poorly named.
          // Trying to impose a reasonable naming scheme but since this .logo class has been out in the either for a long time we are going to announce its
          // deprecation (but not remove it for now) while providing the new name

    @include titlebar-responsive-logo(keysight-logo);

  }

  // This is a new branding logo specific to PathWave: as such I'm going to use the correct Caranu spec sizes
  // This image = "Path Wave"
  // JEFF_TODO_LOGO Even though this pathwave logo uses the responive mixin it doesn't have the left side icon included. Will need to fix up once icon team gets us updated svg/icons
  &keysight-logo-pathwave {
    @include titlebar-responsive-logo(keysight-logo-pathwave);
  }

  // &brand-signature, Former name for this icon. I searched all consumers and didn't find any users of it other than the Alloy AboutBox (this project) so I've renamed
  // to match the naming convention but keep this comment/moniker name in the remote chance someone was digging into our Alloy icons and using it directly
  // This image = <Keysight red wave logo icon> + "Keysight Technologies"
  &keysight-logo-signature {
    $icon-width: 21px;
    $height: 36px;
    $width: 102px;

    display: block;
    @include size($width, $height);
    // JEFF_TODO: Why are there particular settings like this float? This doesn't make this icon very re-usable. It's acting like it's living in a very specific hard coded
    // environment. The container of this logo should specify things like alignment and even margin/spacing
    float:right;

    margin: 7px 12px 0 0;

    background: transparent map_get($icon-pack, keysight-logo-signature) no-repeat left center / $width $height;
  }

  &close-x {
    $size: 16px;

    display: inline-block;
    @include size($size);

    background: transparent map_get($icon-pack, close-x) no-repeat center center / $size;

    &:hover {
        background: transparent map_get($icon-pack, close-x-hover) no-repeat center center / $size;
    }

    &:active,
    &.is-active,
    &:focus {
        background: transparent map_get($icon-pack, close-x-active) no-repeat center center / $size;
    }
  }

  &maximize {
    $size: 16px;

    display: inline-block;
    @include size($size);

    &,
    &:hover,
    &:active,
    &.is-active,
    &:focus {
        background: transparent map_get($icon-pack, maximize) no-repeat center center / $size;
    }
  }

  &minimize {
    $width: 16px;
    $height: 1px;

    display: inline-block;
    @include size($width, $height);

    &,
    &:hover,
    &:active,
    &.is-active,
    &:focus {
        background: transparent map_get($icon-pack, minimize) no-repeat bottom 8px center / $width $height;
    }
  }

  &caret {
    $width: 11px;
    $height: 7px;

    display: inline-block;
    @include size($width, $height);

    &.up {
        background: transparent map_get($icon-pack, caret-down) no-repeat center center / $width $height;

        transform: rotate(180deg);
    }

    &.right {
        background: transparent map_get($icon-pack, caret-down) no-repeat center center / $width $height;

        transform: rotate(-90deg);
    }

    &.down {
        background: transparent map_get($icon-pack, caret-down) no-repeat center center / $width $height;
    }

    &.left {
        background: transparent map_get($icon-pack, caret-down) no-repeat center center / $width $height;

        transform: rotate(90deg);
    }

    // For carets used as expanders, Caranu specifies that hover & pressed state are the same color
    &:hover,
    &.is-hover,
    &:active,
    &.is-active {
        &.up {
        background: transparent map_get($icon-pack, caret-down-hover) no-repeat center center / $width $height;
        }

        &.right {
        background: transparent map_get($icon-pack, caret-down-hover) no-repeat center center / $width $height;
        }

        &.down {
        background: transparent map_get($icon-pack, caret-down-hover) no-repeat center center / $width $height;
        }

        &.left {
        background: transparent map_get($icon-pack, caret-down-hover) no-repeat center center / $width $height;
        }
    }
  }

  &qa-toolbar {
    $size: 16px;

    display: block;
    @include size($size);

    &.folder {
        background: transparent map_get($icon-pack, folder) no-repeat center center / 13px 17px;
    }

    &.save {
        background: transparent map_get($icon-pack, save) no-repeat center center / 14px;
    }

    &.undo {
        background: transparent map_get($icon-pack, undo) no-repeat center center / 15px 16px;
    }

    &.redo {
        background: transparent map_get($icon-pack, redo) no-repeat center center / 15px 16px;
    }

    &.play {
        background: transparent map_get($icon-pack, play) no-repeat center center / 12px 16px;
    }

    &.stop {
        background: transparent map_get($icon-pack, stop) no-repeat center center / 14px;
    }

    &.ellipses {
        background: transparent map_get($icon-pack, ellipses) no-repeat center center / 12px 2px;
    }

    &.download {
        background: transparent map_get($icon-pack, download) no-repeat center center / 16px 15px;
    }

    &.remove {
        background: transparent map_get($icon-pack, remove) no-repeat center center / 16px 15px;
    }

    &.target {
        background: transparent map_get($icon-pack, target) no-repeat center center / 14px;
    }

    &.property {
        background: transparent map_get($icon-pack, property) no-repeat center center / 16px;
    }
  }

  &error {
    $size: 16px;

    display: none;
    @include size($size);

    background: transparent map_get($icon-pack, error) no-repeat center center / $size;
  }

  &errorRight {
    $size: 16px;
    background: transparent map_get($icon-pack, error) no-repeat center right / $size;
    background-origin: content-box;
  }

  &check {
    $width: 12px;
    $height: 10px;

    display: inline-block;
    @include size($width, $height);

    background: transparent map_get($icon-pack, check) no-repeat center center / $width $height;
  }

  &arrow {
    $width: 8px;
    $height: 4px;

    &,
    &:focus {
        display: inline-block;
        @include size($width, $height);

        &.up {
        background: transparent map_get($icon-pack, arrow-up) no-repeat center center / $width $height;
        }

        &.down {
        background: transparent map_get($icon-pack, arrow-down) no-repeat center center / $width $height;
        }
    }

    &:hover,
    &.is-hovered {
        &.up {
        @if $theme-light == true {
            background: transparent map_get($icon-pack, arrow-up-hover) no-repeat center center / $width $height;
        } @else {
            background: transparent map_get($icon-pack, arrow-up-active) no-repeat center center / $width $height;
        }
        }

        &.down {
        @if $theme-light == true {
            background: transparent map_get($icon-pack, arrow-down-hover) no-repeat center center / $width $height;
        } @else {
            background: transparent map_get($icon-pack, arrow-down-active) no-repeat center center / $width $height;
        }
        }
    }

    &:active,
    &.is-pressed {
        &.up {
        background: map_get($color-palette, button-spin-bg-active) map_get($icon-pack, arrow-up-active) no-repeat center center / $width $height;
        }

        &.down {
        background: map_get($color-palette, button-spin-bg-active) map_get($icon-pack, arrow-down-active) no-repeat center center / $width $height;
        }
    }
  }

  &mag-glass {
    @include icon-base(mag-glass);
  }

  &clear {
    @include icon-base(clear);
  }

  &delete {
    @include icon-base(delete);
  }

  &error-msg {
    @include icon-base(error);
  }

  &warning {
    @include icon-base(warning);
  }

  &information {
    @include icon-base(information);
  }

  &settings {
        @include icon-base(settings);
  }

  &user-profile {
        @include icon-base(user-profile);
  }
  
  &delete-trash-can {
    @include icon-base(delete-trash-can, 16px);
  }

  &copy {
    @include icon-base(copy, 16px);
  }


}
